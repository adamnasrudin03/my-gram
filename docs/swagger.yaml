basePath: /
definitions:
  dto.ListParam:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      page:
        type: integer
    required:
    - limit
    - page
    type: object
  dto.LoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.LoginRes:
    properties:
      token:
        type: string
    type: object
  dto.RegisterReq:
    properties:
      age:
        type: integer
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.SocialMediaCreateReq:
    properties:
      name:
        type: string
      social_media_url:
        type: string
      user_id:
        type: integer
    type: object
  dto.SocialMediaListRes:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.SocialMedia'
        type: array
      last_page:
        type: integer
      limit:
        type: integer
      page:
        type: integer
      total_data:
        type: integer
    type: object
  entity.SocialMedia:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.User:
    properties:
      age:
        type: integer
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: admin@mail.me
    name: API Support
  description: Service to manage MyGram data
  termsOfService: https://google.com
  title: My Gram API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login User
      parameters:
      - description: Login User
        in: body
        name: dto.LoginReq
        required: true
        schema:
          $ref: '#/definitions/dto.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginRes'
      summary: Login User
      tags:
      - Auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register new User
      parameters:
      - description: Register User
        in: body
        name: dto.RegisterReq
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.User'
      summary: Register User
      tags:
      - Auth
  /api/v1/social-media:
    get:
      consumes:
      - application/json
      description: Get All new SocialMedia
      parameters:
      - description: Get All Social Media
        in: body
        name: dto.ListParam
        required: true
        schema:
          $ref: '#/definitions/dto.ListParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SocialMediaListRes'
      summary: Get All SocialMedia
      tags:
      - Social Media
    post:
      consumes:
      - application/json
      description: Create new SocialMedia
      parameters:
      - description: Create SocialMedia
        in: body
        name: dto.SocialMediaCreateReq
        required: true
        schema:
          $ref: '#/definitions/dto.SocialMediaCreateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.SocialMedia'
      summary: Create SocialMedia
      tags:
      - Social Media
swagger: "2.0"
