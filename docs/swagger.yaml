basePath: /api/v1
definitions:
  dto.CommentCreateUpdateReq:
    properties:
      message:
        type: string
      photo_id:
        type: integer
    required:
    - message
    type: object
  dto.CommentListRes:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.Comment'
        type: array
      last_page:
        type: integer
      limit:
        type: integer
      page:
        type: integer
      total_data:
        type: integer
    type: object
  dto.LoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginRes:
    properties:
      token:
        type: string
    type: object
  dto.RegisterReq:
    properties:
      age:
        minimum: 8
        type: integer
      email:
        type: string
      password:
        minLength: 4
        type: string
      username:
        type: string
    required:
    - age
    - email
    - password
    - username
    type: object
  dto.SocialMediaCreateReq:
    properties:
      name:
        type: string
      social_media_url:
        type: string
    required:
    - name
    - social_media_url
    type: object
  dto.SocialMediaListRes:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.SocialMedia'
        type: array
      last_page:
        type: integer
      limit:
        type: integer
      page:
        type: integer
      total_data:
        type: integer
    type: object
  dto.SocialMediaUpdateReq:
    properties:
      name:
        type: string
      social_media_url:
        type: string
    required:
    - name
    - social_media_url
    type: object
  entity.Comment:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo:
        $ref: '#/definitions/entity.Photo'
      photo_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.Photo:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.SocialMedia:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.User:
    properties:
      age:
        type: integer
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  helpers.ResponseDefault:
    properties:
      code:
        type: integer
      error:
        type: string
      message:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger MyGram API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login User
      parameters:
      - description: Login User
        in: body
        name: dto.LoginReq
        required: true
        schema:
          $ref: '#/definitions/dto.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginRes'
      summary: Login User
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register new User
      parameters:
      - description: Register User
        in: body
        name: dto.RegisterReq
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.User'
      summary: Register User
      tags:
      - Auth
  /comments:
    get:
      consumes:
      - application/json
      description: Get All Comment
      parameters:
      - description: Pagination Get All Comment
        in: query
        name: page
        required: true
        type: integer
      - description: Pagination Get All Comment
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CommentListRes'
      security:
      - BearerAuth: []
      summary: GetAll
      tags:
      - Comment
    post:
      consumes:
      - application/json
      description: Create new data Comment
      parameters:
      - description: Create Comment
        in: body
        name: dto.CommentCreateUpdateReq
        required: true
        schema:
          $ref: '#/definitions/dto.CommentCreateUpdateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Comment'
      security:
      - BearerAuth: []
      summary: CreateComment
      tags:
      - Comment
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ResponseDefault'
      security:
      - BearerAuth: []
      summary: DeleteComment
      tags:
      - Comment
    get:
      consumes:
      - application/json
      description: GetOne Comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Comment'
      security:
      - BearerAuth: []
      summary: GetOne
      tags:
      - Comment
    put:
      consumes:
      - application/json
      description: Update Comment by ID
      parameters:
      - description: Update Comment
        in: body
        name: dto.CommentCreateUpdateReq
        required: true
        schema:
          $ref: '#/definitions/dto.CommentCreateUpdateReq'
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Comment'
      security:
      - BearerAuth: []
      summary: UpdateComment
      tags:
      - Comment
  /social-media:
    get:
      consumes:
      - application/json
      description: Get All Social Media
      parameters:
      - description: Pagination Get All Social Media
        in: query
        name: page
        required: true
        type: integer
      - description: Pagination Get All Social Media
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SocialMediaListRes'
      security:
      - BearerAuth: []
      summary: GetAll
      tags:
      - Social Media
    post:
      consumes:
      - application/json
      description: Create new data Social Media
      parameters:
      - description: Create SocialMedia
        in: body
        name: dto.SocialMediaCreateReq
        required: true
        schema:
          $ref: '#/definitions/dto.SocialMediaCreateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.SocialMedia'
      security:
      - BearerAuth: []
      summary: CreateSocialMedia
      tags:
      - Social Media
  /social-media/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Social Media by ID
      parameters:
      - description: Social Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ResponseDefault'
      security:
      - BearerAuth: []
      summary: DeleteSocialMedia
      tags:
      - Social Media
    get:
      consumes:
      - application/json
      description: GetOne Social Media by ID
      parameters:
      - description: Social Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SocialMedia'
      security:
      - BearerAuth: []
      summary: GetOne
      tags:
      - Social Media
    put:
      consumes:
      - application/json
      description: Update Social Media by ID
      parameters:
      - description: Update SocialMedia
        in: body
        name: dto.SocialMediaUpdateReq
        required: true
        schema:
          $ref: '#/definitions/dto.SocialMediaUpdateReq'
      - description: Social Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SocialMedia'
      security:
      - BearerAuth: []
      summary: UpdateSocialMedia
      tags:
      - Social Media
securityDefinitions:
  BearerAuth:
    description: Add "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
